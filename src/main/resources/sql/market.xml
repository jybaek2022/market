<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="market">
   	<select id="allProduct" parameterType="HashMap" resultType="gu.market.repository.model.Product">
		SELECT *
		FROM PRODUCT
		WHERE PRODUCTSTATUS=''
		LIMIT #{startNo}, #{cntPerPage}
	</select>
	
	<select id="countProduct" resultType="int">
		SELECT COUNT(*) FROM PRODUCT
	</select>

	<select id="searchProduct" parameterType="String" resultType="gu.market.repository.model.Product">
        SELECT productNo, productCatCode, productName, productDetail, productPrice, productStock, productStatus
          FROM product
         WHERE productName
          Like "%"#{productName}"%"
    </select> 
    
    <select id="selectProductOne" parameterType="String" resultType="gu.market.repository.model.Product">
        SELECT productNo, productCatCode, productName, productDetail, productPrice, productStock, productStatus
          FROM product
         WHERE productNo=#{productNo} 
    </select> 
    
   	<select id="recommandProduct" resultType="gu.market.repository.model.Product">
        SELECT productNo, productCatCode, productName, productDetail, productPrice
          FROM product
         WHERE productCatCode=2
    </select> 
    
    <select id="newProduct" resultType="gu.market.repository.model.Product">
        SELECT productNo, productCatCode, productName, productDetail, productPrice
          FROM product
      ORDER BY productAddDate DESC limit 3 
    </select> 
    
    <select id="login" parameterType="String" resultType="gu.market.repository.model.Member">
        SELECT memberName, memberCheck, memberId
          FROM member
         WHERE memberId=#{memberId} and memberPw=#{memberPw}
    </select>
	<select id="idCheck" parameterType="String" resultType="gu.market.repository.model.Member">
        SELECT *
          FROM member
         WHERE memberId=#{memberId}
    </select>
    <insert id="joinMember" parameterType="gu.market.repository.model.Member" >
        INSERT INTO member (memberId, memberPw, memberName, memberPhone, memberAddress1, memberAddress2, memberGender, memberBirthDate)
        VALUES (#{memberId}, #{memberPw}, #{memberName}, #{memberPhone}, #{memberAddress1}, #{memberAddress2}, #{memberGender}, #{memberBirthDate})
    </insert>
    
    <update id="minusCount" parameterType="gu.market.repository.model.Product">
        UPDATE product
        SET productStock = productStock-#{salesCount}
        WHERE productNo=#{productNo}
    </update>
    <insert id="purchase" parameterType="gu.market.repository.model.Sales">
        INSERT INTO sales (memberId, productNo, salesCount)
        VALUES (#{memberId}, #{productNo}, #{salesCount})
    </insert>
    <delete id = "deleteFcart" parameterType="gu.market.repository.model.Cart">
   	 	DELETE 
   	 	FROM cart
		WHERE cartNo = #{cartNo}
    </delete>

    <insert id="addProduct" parameterType="gu.market.repository.model.Product">
        INSERT INTO product (productName, productCatCode, productDetail, productPrice, productStock, productStatus, productImgSrc)
        VALUES (#{productName}, #{productCatCode}, #{productDetail}, #{productPrice}, #{productStock}, #{productStatus}, #{productImgSrc})
    </insert>

   	<select id="allCart" resultType="gu.market.repository.model.Cart">
       SELECT p.productNo, p.productName, c.salesCount, p.productPrice, c.cartNo
       FROM cart c
       INNER JOIN product p ON c.productNo = p.productNo
       WHERE memberId=#{id}
    </select>
   
    <insert id="addCart" parameterType="gu.market.repository.model.Cart">
        INSERT INTO cart (memberId, productNo, salesCount)
        VALUES (#{memberId}, #{productNo}, #{salesCount})
    </insert>
   	<select id="allMember" resultType="gu.market.repository.model.Member">
        SELECT memberId, memberName, memberPhone, memberAddress1, memberAddress2, memberJoinDate, memberBirthDate, memberGender, memberCheck
        FROM member
    </select> 
    <select id="selectMemberOne" parameterType="String" resultType="gu.market.repository.model.Member">
        SELECT memberId, memberName, memberPhone, memberAddress1, memberAddress2, memberJoinDate, memberBirthDate, memberGender, memberCheck
        FROM member
        WHERE memberId=#{memberId} 
    </select>
    <update id="deleteAdmin" parameterType="gu.market.repository.model.Member">
        UPDATE member
        SET memberCheck = null
        WHERE memberId=#{memberId}
    </update>
    <update id="addAdmin" parameterType="gu.market.repository.model.Member">
        UPDATE member
        SET memberCheck = 'Y'
        WHERE memberId=#{memberId}
    </update> 
    
    <update id="modifyMember" parameterType="gu.market.repository.model.Member">
        UPDATE member
        SET memberName = #{memberName}, memberGender = #{memberGender}, memberBirthDate = #{memberBirthDate} 
        WHERE memberId=#{memberId}
    </update>
    <select id="adminProduct" resultType="gu.market.repository.model.Product">
        SELECT productNo, productCatCode, productName, productDetail, productPrice, productStock, productStatus
          FROM product
    </select> 
    <update id="modifyProduct" parameterType="gu.market.repository.model.Product">
        UPDATE product
        SET productCatCode = #{productCatCode}, productName = #{productName}, productDetail = #{productDetail}, productPrice = #{productPrice}, productStock = #{productStock}, productStatus = #{productStatus} 
        WHERE productNo=#{productNo}
    </update>
    <update id="deleteProduct" parameterType="gu.market.repository.model.Product">
        UPDATE product
           SET productStatus = #{productStatus} 
         WHERE productNo=#{productNo}
    </update>
    <select id="purchaseList" resultType="map">
        SELECT s.salesNo, s.productNo, s.salesCount, p.productPrice, s.salesDate, p.productName
        FROM sales s
        INNER JOIN product p ON s.productNo = p.productNo
        WHERE memberId=#{memberId}
    </select>
    <select id="productSales" resultType="map">
        SELECT s.productNo, s.salesCount, SUM(s.salesCount*p.productPrice) AS sum, p.productName 
        FROM sales s
        INNER JOIN product p ON s.productNo = p.productNo
        GROUP BY p.productNo
    </select>
    <select id="memberSales" resultType="map">
        SELECT s.memberId, s.productNo, s.salesCount, SUM(s.salesCount*p.productPrice) AS sum, p.productName 
        FROM sales s
        INNER JOIN product p ON s.productNo = p.productNo
        GROUP BY s.memberId
    </select>
</mapper>